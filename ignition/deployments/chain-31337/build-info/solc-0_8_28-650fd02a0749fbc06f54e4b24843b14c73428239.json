{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-650fd02a0749fbc06f54e4b24843b14c73428239",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/AcademicRecordStorage.sol": "project/contracts/AcademicRecordStorage.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "project/contracts/AcademicRecordStorage.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\"; \n\ncontract AcademicRecordStorage is Ownable {\n  struct Record {\n    bytes32 recordId;\n    address student;\n    address institution;\n    bytes encryptedData;\n    bytes encryptedKeyInstitution;\n    bytes encryptedKeyStudent;\n    bytes signature;\n    uint256 timestamp;\n  }\n  mapping(bytes32 => Record) public records;\n  mapping(bytes32 => mapping(address => bytes)) public visitorAccessKeys;\n  \n  event RecordRegistered(\n    bytes32 indexed recordId,\n    address indexed student,\n    address indexed institution,\n    uint256 timestamp\n  );\n\n  event AccessGranted(\n    bytes32 indexed recordId,\n    address indexed student,\n    address indexed visitorAddress\n  );\n\n  event AccessRevoked(\n    bytes32 indexed recordId,\n    address indexed student,\n    address indexed visitorAddress\n  );\n\n  mapping(address => bool) public isInstitution;\n\n  constructor() Ownable(msg.sender) {} \n\n  modifier onlyInstitution() {\n    require(isInstitution[msg.sender], \"Caller is not an autorized institution\");\n    _;\n  }\n\n  function addInstitution(address _institution) public onlyOwner {\n    require(_institution != address(0), \"Institution address cannot be zero\");\n    isInstitution[_institution] = true;\n  }\n\n  function removeInstitution(address _institution) public onlyOwner {\n    require(_institution != address(0), \"Institution address cannot be zero\");\n    isInstitution[_institution] = false;\n  }\n\n  function registerBatchRecords(\n    bytes32[] calldata _recordIds, address[] calldata _studentes, \n    bytes[] calldata _encryptedData, bytes[] calldata _encryptedKeyInstitution, \n    bytes[] calldata _encryptedKeyStudent, bytes[] calldata _signatures\n  ) external onlyInstitution {\n    require(\n      _recordIds.length == _studentes.length && \n      _recordIds.length == _encryptedData.length &&\n      _recordIds.length == _encryptedKeyInstitution.length && \n      _recordIds.length == _encryptedKeyStudent.length &&\n      _recordIds.length == _signatures.length, \"Array lengths mismatch\"\n    );\n    require(_recordIds.length > 0, \"No records to register\");\n\n    for (uint i = 0; i < _recordIds.length; i++) {\n      bytes32 currentRecordId = _recordIds[i];\n      address currentstudent = _studentes[i];\n      require(records[currentRecordId].student == address(0), \"Record ID already exists\");\n      require(currentstudent != address(0), \"Student address cannot be zero\");\n\n      records[currentRecordId] = Record({\n        recordId: currentRecordId, student: currentstudent, institution: msg.sender, \n        encryptedData: _encryptedData[i], encryptedKeyInstitution: _encryptedKeyInstitution[i],\n        encryptedKeyStudent: _encryptedKeyStudent[i], signature: _signatures[i], \n        timestamp: block.timestamp\n      });\n      emit RecordRegistered(currentRecordId, currentstudent, msg.sender, block.timestamp);\n    }\n  }\n\n  function grantVisitorAccess(\n    bytes32 _recordId, address _visitorAddress, bytes calldata _encryptedKeyVisitor\n  ) public {\n    require(records[_recordId].student == msg.sender, \"Caller is not the student owner of this record\");\n    require(_visitorAddress != address(0), \"Visitor address cannot be zero\");\n    require(_encryptedKeyVisitor.length > 0, \"Encrypted key for visitor cannot be empty\");\n    visitorAccessKeys[_recordId][_visitorAddress] = _encryptedKeyVisitor;\n    emit AccessGranted(_recordId, msg.sender, _visitorAddress);\n  }\n\n  function revokeVisitorAccess(bytes32 _recordId, address _visitorAddress) public {\n    require(records[_recordId].student == msg.sender, \"Caller is not the student owner of this record\");\n    require(_visitorAddress != address(0), \"Visitor address cannot be zero\");\n    require(visitorAccessKeys[_recordId][_visitorAddress].length > 0, \"Visitor does not have active access\");\n    delete visitorAccessKeys[_recordId][_visitorAddress]; \n    emit AccessRevoked(_recordId, msg.sender, _visitorAddress);\n  }\n\n  function getRecord(bytes32 _recordId) public view returns (Record memory) {\n    require(records[_recordId].student != address(0), \"Record not found\");\n    return records[_recordId];\n  }\n}\n"
      }
    }
  }
}